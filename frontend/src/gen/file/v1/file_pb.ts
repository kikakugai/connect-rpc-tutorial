// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file file/v1/file.proto (package file.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message file.v1.ListFilesRequest
 */
export class ListFilesRequest extends Message<ListFilesRequest> {
  constructor(data?: PartialMessage<ListFilesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "file.v1.ListFilesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFilesRequest {
    return new ListFilesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFilesRequest {
    return new ListFilesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFilesRequest {
    return new ListFilesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListFilesRequest | PlainMessage<ListFilesRequest> | undefined, b: ListFilesRequest | PlainMessage<ListFilesRequest> | undefined): boolean {
    return proto3.util.equals(ListFilesRequest, a, b);
  }
}

/**
 * @generated from message file.v1.ListFilesResponse
 */
export class ListFilesResponse extends Message<ListFilesResponse> {
  /**
   * @generated from field: repeated string filenames = 1;
   */
  filenames: string[] = [];

  constructor(data?: PartialMessage<ListFilesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "file.v1.ListFilesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filenames", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFilesResponse {
    return new ListFilesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFilesResponse {
    return new ListFilesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFilesResponse {
    return new ListFilesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListFilesResponse | PlainMessage<ListFilesResponse> | undefined, b: ListFilesResponse | PlainMessage<ListFilesResponse> | undefined): boolean {
    return proto3.util.equals(ListFilesResponse, a, b);
  }
}

/**
 * @generated from message file.v1.DownloadRequest
 */
export class DownloadRequest extends Message<DownloadRequest> {
  /**
   * @generated from field: string filename = 1;
   */
  filename = "";

  constructor(data?: PartialMessage<DownloadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "file.v1.DownloadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filename", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownloadRequest {
    return new DownloadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownloadRequest {
    return new DownloadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownloadRequest {
    return new DownloadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DownloadRequest | PlainMessage<DownloadRequest> | undefined, b: DownloadRequest | PlainMessage<DownloadRequest> | undefined): boolean {
    return proto3.util.equals(DownloadRequest, a, b);
  }
}

/**
 * @generated from message file.v1.DownloadResponse
 */
export class DownloadResponse extends Message<DownloadResponse> {
  /**
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<DownloadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "file.v1.DownloadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DownloadResponse {
    return new DownloadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DownloadResponse {
    return new DownloadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DownloadResponse {
    return new DownloadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DownloadResponse | PlainMessage<DownloadResponse> | undefined, b: DownloadResponse | PlainMessage<DownloadResponse> | undefined): boolean {
    return proto3.util.equals(DownloadResponse, a, b);
  }
}

/**
 * @generated from message file.v1.UploadRequest
 */
export class UploadRequest extends Message<UploadRequest> {
  /**
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<UploadRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "file.v1.UploadRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadRequest {
    return new UploadRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadRequest {
    return new UploadRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadRequest {
    return new UploadRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UploadRequest | PlainMessage<UploadRequest> | undefined, b: UploadRequest | PlainMessage<UploadRequest> | undefined): boolean {
    return proto3.util.equals(UploadRequest, a, b);
  }
}

/**
 * @generated from message file.v1.UploadResponse
 */
export class UploadResponse extends Message<UploadResponse> {
  /**
   * @generated from field: int32 size = 1;
   */
  size = 0;

  constructor(data?: PartialMessage<UploadResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "file.v1.UploadResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UploadResponse {
    return new UploadResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UploadResponse {
    return new UploadResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UploadResponse {
    return new UploadResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UploadResponse | PlainMessage<UploadResponse> | undefined, b: UploadResponse | PlainMessage<UploadResponse> | undefined): boolean {
    return proto3.util.equals(UploadResponse, a, b);
  }
}

